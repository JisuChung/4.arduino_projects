
GccApplication5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000172  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000083e  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000784  00000000  00000000  00000a4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002bc  00000000  00000000  000011d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001490  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ed  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000078  00000000  00000000  000018e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001959  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__vector_1>
   6:	00 00       	nop
   8:	5a c0       	rjmp	.+180    	; 0xbe <__vector_2>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	22 d0       	rcall	.+68     	; 0xde <main>
  9a:	3f c0       	rjmp	.+126    	; 0x11a <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <__vector_1>:

#define sbi(PORTX,BitX) PORTX|=(1<<BitX)
#define cbi(PORTX,BitX) PORTX&=~(1<<BitX)

SIGNAL(INT0_vect) //INT0이 입력을 받았을 때
{
  9e:	1f 92       	push	r1
  a0:	0f 92       	push	r0
  a2:	0f b6       	in	r0, 0x3f	; 63
  a4:	0f 92       	push	r0
  a6:	11 24       	eor	r1, r1
  a8:	8f 93       	push	r24
	cli(); //SREG의 7번비트 클리어
  aa:	f8 94       	cli
	PORTA=0xf0; //PA4~7까지만 LED를 켠다.
  ac:	80 ef       	ldi	r24, 0xF0	; 240
  ae:	8b bb       	out	0x1b, r24	; 27
	sei(); //SREG=0x08;과 같은 의미로 외부 인터럽트 레지스터의 사용 시에 꼭 설정해주어야 한다.
  b0:	78 94       	sei
}
  b2:	8f 91       	pop	r24
  b4:	0f 90       	pop	r0
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	0f 90       	pop	r0
  ba:	1f 90       	pop	r1
  bc:	18 95       	reti

000000be <__vector_2>:

SIGNAL(INT1_vect) //INT1이 입력을 받았을 때
{
  be:	1f 92       	push	r1
  c0:	0f 92       	push	r0
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	0f 92       	push	r0
  c6:	11 24       	eor	r1, r1
  c8:	8f 93       	push	r24
	cli();
  ca:	f8 94       	cli
	PORTA=0x0f; //PA0~3까지만 LED를 켠다.
  cc:	8f e0       	ldi	r24, 0x0F	; 15
  ce:	8b bb       	out	0x1b, r24	; 27
	sei();
  d0:	78 94       	sei
}
  d2:	8f 91       	pop	r24
  d4:	0f 90       	pop	r0
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	0f 90       	pop	r0
  da:	1f 90       	pop	r1
  dc:	18 95       	reti

000000de <main>:

int main()
{
	DDRA=0xff; //PA0~7을 입력으로 사용
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	8a bb       	out	0x1a, r24	; 26
	PORTA=0x00; //PA0~7에 0V를 출력
  e2:	1b ba       	out	0x1b, r1	; 27
	DDRD=0x00; //PD0~1에 Switch가 연결되어 있음. 따라서 입력으로 이용
  e4:	11 ba       	out	0x11, r1	; 17
	sei(); //External interrupt를 사용하기 위해 꼭 필요한 소스
  e6:	78 94       	sei

	EICRA=(1<<ISC01)|(1<<ISC00)|(1<<ISC11)|(1<<ISC10);
  e8:	9f e0       	ldi	r25, 0x0F	; 15
  ea:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	//외부 인터럽트 제어 레지스터A로 INT0~3까지의 트리거 방식을 각자 두 비트씩으로 표현할 수 있음.
	EIMSK=(1<<INT1)|(1<<INT0);
  ee:	93 e0       	ldi	r25, 0x03	; 3
  f0:	99 bf       	out	0x39, r25	; 57
	//외부 인터럽트 마스크 레지스터로 INT0~7을 enable하게 할지 말지를 선택하도록 함

	DDRB = 0xff;  //PWM을 모터부분이니까 출력으로 사용한다.
  f2:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xff;  //Motor_DIrection 부분이니까 출력으로 사용한다.
  f4:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x0a; //정방향
  f6:	9a e0       	ldi	r25, 0x0A	; 10
  f8:	95 bb       	out	0x15, r25	; 21
	PORTB = 0xff; //모두 5V 출력
  fa:	88 bb       	out	0x18, r24	; 24

	TCCR1A = (1 << COM1A1) | (0 << COM1A0) | (1 << COM1B1) | (0 << COM1B0) | (0 << COM1C1) | (0 << COM1C0) | (1 << WGM11) | (0 << WGM10);  //14번 fast PWM모드
  fc:	82 ea       	ldi	r24, 0xA2	; 162
  fe:	8f bd       	out	0x2f, r24	; 47
	TCCR1B = (1 << WGM13 ) | (1 << WGM12) | (1 << CS12) | (0 << CS11) | (0 << CS10);
 100:	8c e1       	ldi	r24, 0x1C	; 28
 102:	8e bd       	out	0x2e, r24	; 46
	//TCCR1B : 타이머/카운터1 제어 레지스터 B로서  WGMn3, WGMn2, WGMn1, WGMn0을 설정함으로써 타이머/카운터1과 3의 동작모드를 선택할 수 있고 나머지 CS12, CS11, CS10을 가지고 분주비를 바꿀 수 있다.

	ICR1 = 800;  //TOP값의 설정
 104:	80 e2       	ldi	r24, 0x20	; 32
 106:	93 e0       	ldi	r25, 0x03	; 3
 108:	97 bd       	out	0x27, r25	; 39
 10a:	86 bd       	out	0x26, r24	; 38

	while(1)
	{
		OCR1A = 400;  //바퀴 한 쪽의 속도
 10c:	80 e9       	ldi	r24, 0x90	; 144
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	9b bd       	out	0x2b, r25	; 43
 112:	8a bd       	out	0x2a, r24	; 42
		OCR1B = 400;  //바퀴 다른 한 쪽의 속도
 114:	99 bd       	out	0x29, r25	; 41
 116:	88 bd       	out	0x28, r24	; 40
 118:	fb cf       	rjmp	.-10     	; 0x110 <main+0x32>

0000011a <_exit>:
 11a:	f8 94       	cli

0000011c <__stop_program>:
 11c:	ff cf       	rjmp	.-2      	; 0x11c <__stop_program>
